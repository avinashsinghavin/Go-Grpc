// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	Calculate(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculatorResponse, error)
	PrimeDecomposition(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (CalculatorService_PrimeDecompositionClient, error)
	AverageClientStreaming(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_AverageClientStreamingClient, error)
	FindMaxNumberBiDirectional(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_FindMaxNumberBiDirectionalClient, error)
}

type calculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorServiceClient(cc grpc.ClientConnInterface) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) Calculate(ctx context.Context, in *CalculationRequest, opts ...grpc.CallOption) (*CalculatorResponse, error) {
	out := new(CalculatorResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorService/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) PrimeDecomposition(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (CalculatorService_PrimeDecompositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[0], "/calculator.CalculatorService/PrimeDecomposition", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServicePrimeDecompositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_PrimeDecompositionClient interface {
	Recv() (*PrimeNoResponse, error)
	grpc.ClientStream
}

type calculatorServicePrimeDecompositionClient struct {
	grpc.ClientStream
}

func (x *calculatorServicePrimeDecompositionClient) Recv() (*PrimeNoResponse, error) {
	m := new(PrimeNoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) AverageClientStreaming(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_AverageClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[1], "/calculator.CalculatorService/AverageClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceAverageClientStreamingClient{stream}
	return x, nil
}

type CalculatorService_AverageClientStreamingClient interface {
	Send(*AverageRequest) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type calculatorServiceAverageClientStreamingClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceAverageClientStreamingClient) Send(m *AverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceAverageClientStreamingClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) FindMaxNumberBiDirectional(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_FindMaxNumberBiDirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[2], "/calculator.CalculatorService/FindMaxNumberBiDirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceFindMaxNumberBiDirectionalClient{stream}
	return x, nil
}

type CalculatorService_FindMaxNumberBiDirectionalClient interface {
	Send(*NumbersRequest) error
	Recv() (*MaxResponse, error)
	grpc.ClientStream
}

type calculatorServiceFindMaxNumberBiDirectionalClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceFindMaxNumberBiDirectionalClient) Send(m *NumbersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceFindMaxNumberBiDirectionalClient) Recv() (*MaxResponse, error) {
	m := new(MaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
// All implementations must embed UnimplementedCalculatorServiceServer
// for forward compatibility
type CalculatorServiceServer interface {
	Calculate(context.Context, *CalculationRequest) (*CalculatorResponse, error)
	PrimeDecomposition(*NumberRequest, CalculatorService_PrimeDecompositionServer) error
	AverageClientStreaming(CalculatorService_AverageClientStreamingServer) error
	FindMaxNumberBiDirectional(CalculatorService_FindMaxNumberBiDirectionalServer) error
	mustEmbedUnimplementedCalculatorServiceServer()
}

// UnimplementedCalculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (UnimplementedCalculatorServiceServer) Calculate(context.Context, *CalculationRequest) (*CalculatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedCalculatorServiceServer) PrimeDecomposition(*NumberRequest, CalculatorService_PrimeDecompositionServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeDecomposition not implemented")
}
func (UnimplementedCalculatorServiceServer) AverageClientStreaming(CalculatorService_AverageClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method AverageClientStreaming not implemented")
}
func (UnimplementedCalculatorServiceServer) FindMaxNumberBiDirectional(CalculatorService_FindMaxNumberBiDirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMaxNumberBiDirectional not implemented")
}
func (UnimplementedCalculatorServiceServer) mustEmbedUnimplementedCalculatorServiceServer() {}

// UnsafeCalculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServiceServer will
// result in compilation errors.
type UnsafeCalculatorServiceServer interface {
	mustEmbedUnimplementedCalculatorServiceServer()
}

func RegisterCalculatorServiceServer(s grpc.ServiceRegistrar, srv CalculatorServiceServer) {
	s.RegisterService(&CalculatorService_ServiceDesc, srv)
}

func _CalculatorService_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorService/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).Calculate(ctx, req.(*CalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_PrimeDecomposition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).PrimeDecomposition(m, &calculatorServicePrimeDecompositionServer{stream})
}

type CalculatorService_PrimeDecompositionServer interface {
	Send(*PrimeNoResponse) error
	grpc.ServerStream
}

type calculatorServicePrimeDecompositionServer struct {
	grpc.ServerStream
}

func (x *calculatorServicePrimeDecompositionServer) Send(m *PrimeNoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_AverageClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).AverageClientStreaming(&calculatorServiceAverageClientStreamingServer{stream})
}

type CalculatorService_AverageClientStreamingServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*AverageRequest, error)
	grpc.ServerStream
}

type calculatorServiceAverageClientStreamingServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceAverageClientStreamingServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceAverageClientStreamingServer) Recv() (*AverageRequest, error) {
	m := new(AverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_FindMaxNumberBiDirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).FindMaxNumberBiDirectional(&calculatorServiceFindMaxNumberBiDirectionalServer{stream})
}

type CalculatorService_FindMaxNumberBiDirectionalServer interface {
	Send(*MaxResponse) error
	Recv() (*NumbersRequest, error)
	grpc.ServerStream
}

type calculatorServiceFindMaxNumberBiDirectionalServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceFindMaxNumberBiDirectionalServer) Send(m *MaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceFindMaxNumberBiDirectionalServer) Recv() (*NumbersRequest, error) {
	m := new(NumbersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorService_ServiceDesc is the grpc.ServiceDesc for CalculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _CalculatorService_Calculate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeDecomposition",
			Handler:       _CalculatorService_PrimeDecomposition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AverageClientStreaming",
			Handler:       _CalculatorService_AverageClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMaxNumberBiDirectional",
			Handler:       _CalculatorService_FindMaxNumberBiDirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
